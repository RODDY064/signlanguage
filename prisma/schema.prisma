datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  votes         Vote[]   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // login stamp 
  lastLogin DateTime? 
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  video_name  String
  description String?
  final_gloss String?
  video_url   String
  votes       Vote[]  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  voteType  String   
  userId    String   @db.ObjectId // Reference to the User
  videoId   String   @db.ObjectId // Reference to the Video
  createdAt DateTime @default(now())

  video Video @relation(fields: [videoId], references: [id])
  @@map("VoteUser")
  @@unique([userId, videoId])
  User User @relation(fields: [userId], references: [id])
}

